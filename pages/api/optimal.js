export default function Priority(req, res) {
    res.status(200).json('#include <stdio. H> int n, nf; int in[100]; int p[50]; int hit = 0; int i, j, k; int pgfaultcnt = 0; void getdata() { printf(" optimal\n"); printf(" =========\n"); printf("\nenter length of page reference sequence : "); scanf("%d", &n); printf("\nenter the page reference sequence: "); for (i = 0; i < n; i++) scanf("%d", &in[i]); printf("\n enter the number of frames: "); scanf("%d", &nf); } void initialize() { pgfaultcnt = 0; for (i = 0; i < nf; i++) p[i] = 9999; } int ishit(int data) { hit = 0; for (j = 0; j < nf; j++) { if (p[j] == data) { hit = 1; break; } } return hit; } int gethitindex(int data) { int hitind; for (k = 0; k < nf; k++) { if (p[k] == data) { hitind = k; break; } } return hitind; } void disppages() { for (k = 0; k < nf; k++) { if (p[k] ! = 9999) printf("%d", p[k]); } } void disppgfaultcnt() { printf("\ntotal no of page faults : %d", pgfaultcnt); } void optimal() { initialize(); int near[50]; for (i = 0; i < n; i++) { printf("\n for %d: ", in[i]); if (ishit(in[i]) == 0) { for (j = 0; j < nf; j++) { int pg = p[j]; int found = 0; for (k = i; k < n; k++) { if (pg == in[k]) { near[j] = k; found = 1; break; } else found = 0; } if (! Found) near[j] = 9999; } int max = -9999; int repindex; for (j = 0; j < nf; j++) { if (near[j] > max) { max = near[j]; repindex = j; } } p[repindex] = in[i]; pgfaultcnt++; disppages(); } else printf("no page fault"); } disppgfaultcnt(); } int main() { getdata(); optimal(); return 0; }')
  }  