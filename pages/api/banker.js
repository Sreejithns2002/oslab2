export default function Bankers(req, res) {
    res.status(200).json('#include <stdio. H> int max[100][100]; int alloc[100][100]; int need[100][100]; int avail[100]; int n, r; void input(); void show(); void calc(); int main() { printf(" deadlock avoidance\n"); printf(" ====================\n"); input(); show(); calc(); return 0; } void input() { int i, j; printf("enter no. Of processes: "); scanf("%d", &n); printf("enter no. Of resource instances: "); scanf("%d", &r); printf("enter max matrix\n"); for (i = 0; i < n; i++) for (j = 0; j < r; j++) scanf("%d", &max[i][j]); printf("enter allocation matrix\n"); for (i = 0; i < n; i++) for (j = 0; j < r; j++) scanf("%d", &alloc[i][j]); printf("enter available resources\n"); for (j = 0; j < r; j++) scanf("%d", &avail[j]); } void show() { int i, j; printf("process\t|allocation\t|max\t\t|available"); for (i = 0; i < n; i++) { printf("\np%d\t|", i + 1); for (j = 0; j < r; j++) printf("%d ", alloc[i][j]); printf("\t\t|"); for (j = 0; j < r; j++) printf("%d ", max[i][j]); printf("\t\t|"); if (i == 0) { for (j = 0; j < r; j++) printf("%d ", avail[j]); } } } void calc() { int finish[100], temp, need[100][100], flag = 1, k, c1 = 0; int safe[100]; int i, j; for (i = 0; i < n; i++) finish[i] = 0; for (i = 0; i < n; i++) for (j = 0; j < r; j++) need[i][j] = max[i][j] - alloc[i][j]; printf("\n"); while (flag) { flag = 0; for (i = 0; i < n; i++) { int c = 0; for (j = 0; j < r; j++) { if ((finish[i] == 0) && (need[i][j] <= avail[j])) { c++; if (c == r) { for (k = 0; k < r; k++) { avail[k] += alloc[i][j]; finish[i] = 1; flag = 1; } printf("p%d->", i + 1); if (finish[i] == 1) i = n; } } } } } for (i = 0; i < n; i++) { if (finish[i] == 1) c1++; else printf("p%d->", i + 1); } if (c1 == n) printf("\nsystem is in safe state\n"); else { printf("\nprocesses are in deadlock\nsystem is in unsafe state\n"); } }')
  }  