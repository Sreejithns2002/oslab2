export default function Fifo(req, res) {
    res.status(200).json('#include <stdio. H> int n, nf; int in[100]; int p[50]; int hit = 0; int i, j, k; int pgfaultcnt = 0; void getdata() { printf(" fifo page replacement\n"); printf(" =======================\n"); printf("\nenter length of page reference sequence: "); scanf("%d", &n); printf("\nenter page reference sequence: \n"); for (i = 0; i < n; i++) scanf("%d", &in[i]); printf("\nenter no. Of frames: "); scanf("%d", &nf); } void initialize() { pgfaultcnt = 0; for (i = 0; i < nf; i++) p[i] = 9999; } int ishit(int data) { hit = 0; for (j = 0; j < nf; j++) { if (p[j] == data) { hit = 1; break; } } return hit; } int gethitindex(int data) { int hitind; for (k = 0; k < nf; k++) { if (p[k] == data) { hitind = k; break; } } return hitind; } void disppages() { for (k = 0; k < nf; k++) { if (p[k] ! = 9999) printf("%d ", p[k]); } } void disppgfaultcnt() { printf("\ntotal no. Of page faults: %d\n", pgfaultcnt); } void fifo() { initialize(); for (i = 0; i < n; i++) { printf("\nfor %d: ", in[i]); if (ishit(in[i]) == 0) { for (k = 0; k < nf - 1; k++) p[k] = p[k + 1]; p[k] = in[i]; pgfaultcnt++; disppages(); } else printf("no page fault! "); } disppgfaultcnt(); } int main() { getdata(); fifo(); return 0; }')
  }  