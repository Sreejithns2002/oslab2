export default function Diskcscan(req, res) {
    res.status(200).json('#include <stdio. H> #define max 25 void main() { int frag[max], b[#include <stdio. H> #include<stdlib. H> int main() { int rq[100], i, j, n, totalheadmovt = 0, initial, size, move; printf(" c-scan disk scheduling\n"); printf(" ========================\n"); printf("enter the number of requests : "); scanf("%d", &n); printf("enter the request sequence\n"); for (i = 0; i < n; i++) scanf("%d", &rq[i]); printf("enter the initial head position : "); scanf("%d", &initial); printf("enter the total disk size : "); scanf("%d", &size); printf("enter the head movement direction (for high 1 and for low 0) : "); scanf("%d", &move); for (i = 0; i < n; i++) { for (j = 0; j < n - i - 1; j++) { if (rq[j] > rq[j + 1]) { int temp; temp = rq[j]; rq[j] = rq[j + 1]; rq[j + 1] = temp; } } } int index; for (i = 0; i < n; i++) { if (initial < rq[i]) { index = i; break; } } if (move == 1) { for (i = index; i < n; i++) { totalheadmovt = totalheadmovt + abs(rq[i] - initial); initial = rq[i]; } totalheadmovt = totalheadmovt + abs(size - rq[i - 1] - 1); totalheadmovt = totalheadmovt + abs(size - 1 - 0); initial = 0; for (i = 0; i < index; i++) { totalheadmovt = totalheadmovt + abs(rq[i] - initial); initial = rq[i]; } } else { for (i = index - 1; i >= 0; i--) { totalheadmovt = totalheadmovt + abs(rq[i] - initial); initial = rq[i]; } totalheadmovt = totalheadmovt + abs(rq[i + 1] - 0); totalheadmovt = totalheadmovt + abs(size - 1 - 0); initial = size - 1; for (i = n - 1; i >= index; i--) { totalheadmovt = totalheadmovt + abs(rq[i] - initial); initial = rq[i]; } } printf("total head movement is %d\n", totalheadmovt); return 0; }max], f[max], i, j, nb, nf, temp, lowest = 10000; static int bf[max], ff[max]; printf(" bestfit memory allocation\n"); printf(" ===========================\n"); printf("enter no. Of blocks: "); scanf("%d", &nb); printf("enter no. Of files: "); scanf("%d", &nf); printf("enter size of blocks\n"); for (i = 1; i <= nb; i++) { printf("block %d: ", i); scanf("%d", &b[i]); } printf("enter size of files\n"); for (i = 1; i <= nf; i++) { printf("file %d: ", i); scanf("%d", &f[i]); } for (i = 1; i <= nf; i++) { for (j = 1; j <= nb; j++) { if (bf[j] ! = 1) { temp = b[j] - f[i]; if (temp >= 0) if (lowest > temp) { ff[i] = j; lowest = temp; } } } frag[i] = lowest; bf[ff[i]] = 1; lowest = 10000; if (ff[i] == 0) printf("\nfile of size %d should wait\n", f[i]); } printf("\nfile no \tfile size \tblock no \tblock size \tfragment"); for (i = 1; i <= nf; i++) if (ff[i] ! = 0) printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, f[i], ff[i], b[ff[i]], frag[i]); printf("\n"); }')
  }  